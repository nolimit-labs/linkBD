/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as appTodosRouteImport } from './routes/(app)/todos'
import { Route as appSettingsRouteImport } from './routes/(app)/settings'
import { Route as appImagesRouteImport } from './routes/(app)/images'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const appTodosRoute = appTodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => appRouteRoute,
} as any)
const appSettingsRoute = appSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appRouteRoute,
} as any)
const appImagesRoute = appImagesRouteImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appRouteRouteWithChildren
  '/images': typeof appImagesRoute
  '/settings': typeof appSettingsRoute
  '/todos': typeof appTodosRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
}
export interface FileRoutesByTo {
  '/': typeof appRouteRouteWithChildren
  '/images': typeof appImagesRoute
  '/settings': typeof appSettingsRoute
  '/todos': typeof appTodosRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/images': typeof appImagesRoute
  '/(app)/settings': typeof appSettingsRoute
  '/(app)/todos': typeof appTodosRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/images' | '/settings' | '/todos' | '/sign-in' | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/images' | '/settings' | '/todos' | '/sign-in' | '/sign-up'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/images'
    | '/(app)/settings'
    | '/(app)/todos'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/todos': {
      id: '/(app)/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof appTodosRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/settings': {
      id: '/(app)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/images': {
      id: '/(app)/images'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof appImagesRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appImagesRoute: typeof appImagesRoute
  appSettingsRoute: typeof appSettingsRoute
  appTodosRoute: typeof appTodosRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appImagesRoute: appImagesRoute,
  appSettingsRoute: appSettingsRoute,
  appTodosRoute: appTodosRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
