---
description: Context and info on how auth is done in our project
globs: 
alwaysApply: false
---
# Better Auth in linkBD

Better Auth is a TypeScript-first authentication framework that manages all auth-related database tables and functionality in linkBD.

## Important: Better Auth Manages Auth-Related Tables and Fields

**Key Understanding**: Better Auth isn't just handling user login - it manages all authentication and authorization-related database tables in our schema. There is a core set of tables added by Better Auth and then there are tables + additional fields added by plugins. This includes:

### Core Auth Tables (from Better Auth)
- `user`, `session`, `account`, `verification`

### Plugin-Added Tables & Fields
- **Organization Plugin**: `organization`, `member`, `invitation` tables + `session.activeOrganizationId`
- **Stripe Plugin**: `subscription` table + `stripeCustomerId` fields on user/organization
- **Anonymous Plugin**: `isAnonymous` field on user

These tables are all auth-related, handling user identity, permissions, and access control. The actual application data (posts, likes, storage, etc.) remains separate.

## Our Implementation

### Server Configuration (`apps/server/src/auth.ts`)
The core of the auth system is in the `auth.ts` file, which configures the auth server.

It uses the following configuration:
- **Database**: Postgres via Drizzle adapter
- **Authentication**: Email/password + anonymous/guest login
- **Plugins**: 
  - `anonymous()` - Guest users
  - `organization()` - Multi-tenancy with custom `stripeCustomerId` field
  - `stripe()` - Payment/subscription management
- **Hooks**: Auto-assign default subscription on user/org creation

### Client Configuration (`apps/web-app/src/lib/auth-client.ts`)
In addition to the server configuration, we have a client configuration that allows us to use the auth client in our web app.
```typescript
// React hooks from apps/web-app/src/lib/auth-client.ts
useSession() // Current user & session
signIn.email() // Email/password login  
signIn.anonymous() // Guest login
organization.create() // Create new org
```

## Important Notes
1. When adding Better Auth plugins, manually add required tables/fields to `schema.ts`. The `auth-schema.ts` file is whats created by better auth but jsut used as a reference to knwo which tables and fields are created by better auth. The `schema.ts` is the source of truth for the database schema.
2. On the client side, the organizations are referred to ass business accounts. Even though the hooks are called organizations, the ui references business accounts, since this is easier to understand for the user.
3. Organization and Stripe plugins extend auth functionality but remain within the auth domain