---
description: Best practices for backend development in the linkBD application
globs: apps/server/**
alwaysApply: false
---
# Backend Best Practices

Follow these best practices when working on the linkBD backend to ensure code quality, type safety, and maintainability.

## 1. Hono RPC Method Chaining with Documentation

**CRITICAL**: All route handlers MUST use method chaining to maintain end-to-end type safety AND include documentation comments above each endpoint.

### Why This Matters
- TypeScript can only infer route types when methods are chained in a single declaration
- Breaking the chain means the frontend loses IntelliSense and type checking
- The RPC system depends on continuous method chaining to generate proper types
- Clear documentation improves code maintainability and team collaboration

### ✅ Correct Implementation
```typescript
// Always chain methods with documentation comments
const posts = new Hono()
  // Get all posts for the authenticated user
  .get('/', async (c) => { /* handler */ })
  
  // Create a new post with validation
  .post('/', async (c) => { /* handler */ })
  
  // Get a specific post by ID
  .get('/:id', async (c) => { /* handler */ })
  
  // Update an existing post
  .put('/:id', async (c) => { /* handler */ })
  
  // Like/unlike a post
  .patch('/:id/like', async (c) => { /* handler */ })
  
  // Delete a post
  .delete('/:id', async (c) => { /* handler */ })

export default posts
```

### ❌ Incorrect Implementation
```typescript
// NEVER break the chain like this
const posts = new Hono()
posts.get('/', handler)  // ❌ Breaks type inference
posts.post('/', handler) // ❌ Types are lost

// NEVER omit documentation
const posts = new Hono()
  .get('/', async (c) => { /* handler */ })     // ❌ No documentation
  .post('/', async (c) => { /* handler */ })    // ❌ Unclear purpose
```

### Main App Setup
```typescript
// In index.ts - chain all application routes and export AppType
const routes = app
  .route('/api/user', userRoutes)
  .route('/api/posts', postsRoutes)
  .route('/api/jobs', jobsRoutes)

export type AppType = typeof routes  // Critical for frontend type safety
```

## 2. Model Functions vs Route Handlers

### Model Functions (in `models/` directory)
- Handle all database operations and business logic
- Return raw data or throw errors
- Keep routes thin and focused on HTTP concerns

### Route Handlers (in `routes/` directory)
- Handle HTTP request/response only
- Call model functions for data operations
- Format responses with proper status codes

### Example
```typescript
// models/posts.ts
export async function getPostById(postId: string, userId: string) {
  const results = await db
    .select()
    .from(posts)
    .where(and(
      eq(posts.id, postId),
      eq(posts.userId, userId)
    ));
  
  return results[0] || null;
}

// routes/posts.ts
.get('/:id', authMiddleware, async (c) => {
  const user = c.get('user');
  const postId = c.req.param('id');
  
  const post = await postModel.getPostById(postId, user.id);
  
  if (!post) {
    return c.json({ error: 'Post not found' }, 404);
  }
  
  return c.json(post);
})
``` 